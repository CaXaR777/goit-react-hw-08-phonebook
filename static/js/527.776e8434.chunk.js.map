{"version":3,"file":"static/js/527.776e8434.chunk.js","mappings":"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","sources":["components/ContactForm/ContactForm.styled.js","redux/contacts/selectors.js","components/ContactForm/ContactForm.jsx","components/Filter/Filter.styled.js","components/Filter/Filter.jsx","components/ContactList/ContactList.styled.jsx","components/ContactList/ContactList.jsx","pages/Contacts.js"],"sourcesContent":["import styled from 'styled-components';\nimport { Form } from 'formik';\n\nexport const StyledForm = styled(Form)`\n  display: flex;\n  flex-direction: column;\n  width: 300px;\n  outline: 1px solid grey;\n  border-radius: 20px;\n  padding: 10px;\n  background-color: black;\n  label {\n    display: flex;\n    flex-direction: column;\n    margin-bottom: 10px;\n    font-size: larger;\n    color: #e22b2b;\n  }\n  input {\n    margin-top: 6px;\n    border-radius: 4px;\n  }\n  button {\n    width: 100px;\n    cursor: pointer;\n    background-color: aqua;\n    background-color: black;\n    color: aqua;\n    color: red;\n    border-radius: 5px;\n    border: 1px solid aqua;\n    &:hover {\n      background-color: aqua;\n      transform: scale(1.1);\n    }\n  }\n`;\n\nexport const Label = styled.label`\n  font-size: 20px;\n  margin-bottom: 20px;\n  display: flex;\n  flex-direction: column;\n  input {\n    width: 200px;\n    padding: 2px;\n    margin-top: 6px;\n    border: 1px solid rgb(219, 216, 216);\n    border-radius: 2px;\n    &:focus {\n      border-color: rgb(99, 149, 241, 0.6);\n      outline: 2px rgba(99, 149, 241, 0.6);\n      outline-style: solid;\n    }\n  }\n`;\n","import { createSelector } from '@reduxjs/toolkit';\n\nexport const selectContacts = state => state.contacts.items;\nexport const selectFilter = state => state.filter.value;\nexport const selectIsLoading = state => state.contacts.isLoading;\nexport const selectError = state => state.contacts.error;\n\nexport const selectVisibleContacts = createSelector(\n  [selectContacts, selectFilter],\n  (contacts, filter) => {\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(filter.toLowerCase())\n    );\n  }\n);\n","import * as s from './ContactForm.styled';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport * as Yup from 'yup';\nimport { Formik, Field, ErrorMessage } from 'formik';\nimport { selectContacts } from '../../redux/contacts/selectors';\nimport { addContact } from '../../redux/contacts/operations';\n\nconst NameInputSchema = Yup.object().shape({\n  name: Yup.string().min(2, 'Too short!').required('Name is required'),\n  number: Yup.string()\n    .matches(/^\\+[1-9]\\d{1,14}$/, 'Invalid phone number format')\n    .required('Must be filled'),\n});\n\nexport const ContactForm = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n\n  const handleSubmit = (values, actions) => {\n    addNewContact(values);\n    actions.resetForm();\n  };\n\n  const addNewContact = newContact => {\n    const hasContact = contacts.some(\n      contact => contact.name.toLowerCase() === newContact.name.toLowerCase()\n    );\n\n    if (hasContact) {\n      alert('A contact with that name already exists');\n      return;\n    }\n    dispatch(addContact(newContact));\n  };\n\n  return (\n    <Formik\n      initialValues={{\n        name: '',\n        number: '',\n      }}\n      validationSchema={NameInputSchema}\n      onSubmit={handleSubmit}\n    >\n      <s.StyledForm>\n        <label>\n          Name\n          <Field type=\"text\" name=\"name\" placeholder=\"Name\" />\n          <ErrorMessage name=\"name\" />\n        </label>\n\n        <label>\n          Number\n          <Field type=\"tel\" name=\"number\" placeholder=\"Number\" />\n          <ErrorMessage name=\"number\" />\n        </label>\n        <button type=\"submit\">Add contact</button>\n      </s.StyledForm>\n    </Formik>\n  );\n};\n","import styled from 'styled-components';\n\nexport const Label = styled.label`\n  font-size: 20px;\n  margin-bottom: 20px;\n  display: flex;\n  flex-direction: column;\n  color: blueviolet;\n  input {\n    width: 200px;\n    padding: 2px;\n    margin-top: 6px;\n    border: 1px solid rgb(219, 216, 216);\n    border-radius: 2px;\n    &:focus {\n      border-color: rgb(99, 149, 241, 0.6);\n      outline: 2px rgba(99, 149, 241, 0.6);\n      outline-style: solid;\n    }\n  }\n`;\nexport const Text = styled.p`\n  margin-right: 10px;\n`;\n\nexport const Container = styled.div`\n  display: flex;\n  align-items: center;\n`;\n","// import React from 'react';\nimport * as s from './Filter.styled';\nimport { FaSkull } from 'react-icons/fa';\n// import PropTypes from 'prop-types';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { setFilter } from '../../redux/contacts/filter';\nimport { selectFilter } from '../../redux/contacts/selectors';\n\nexport const Filter = () => {\n  const dispatch = useDispatch();\n  const filter = useSelector(selectFilter);\n\n  return (\n    <s.Label>\n      <s.Container>\n        <s.Text>Find your target</s.Text>\n        <FaSkull fill=\"yellow\" />\n      </s.Container>\n      <input\n        type=\"text\"\n        value={filter}\n        onChange={evt => dispatch(setFilter(evt.target.value))}\n      />\n    </s.Label>\n  );\n};\n","import styled from 'styled-components';\n\nexport const List = styled.ul`\n  margin-top: 15px;\n`;\n\nexport const ListItems = styled.li`\n  padding: 5px 25px;\n  margin-bottom: 5px;\n  display: flex;\n  align-items: center;\n  &::before {\n    content: '';\n    background: black;\n    width: 6px;\n    height: 6px;\n    border-radius: 100%;\n  }\n`;\nexport const Button = styled.button`\n  padding: 1px 4px;\n  margin-left: 10px;\n  border: 1px solid rgb(219, 216, 216);\n  border-radius: 4px;\n  cursor: pointer;\n  background-color: yellowgreen;\n  box-shadow: rgba(0, 0, 0, 0.12) 0px 0px 1px, rgba(0, 0, 0, 0.14) 0px 0px 1px,\n    rgba(0, 0, 0, 0.2) 0px 1px 0px;\n  &:active {\n    background-color: red;\n  }\n`;\n\nexport const Name = styled.p`\n  font-size: 18px;\n  margin-left: 10px;\n  color: aqua;\n`;\n\nexport const Number = styled.p`\n  font-size: 18px;\n  margin-left: 5px;\n  color: red;\n`;\n","import * as s from './ContactList.styled';\n// import PropTypes from 'prop-types'\nimport { useDispatch } from 'react-redux';\n\nimport { useSelector } from 'react-redux';\n\nimport {\n  selectIsLoading,\n  selectVisibleContacts,\n} from '../../redux/contacts/selectors';\nimport { deleteContact } from '../../redux/contacts/operations';\n\nexport const ContactList = () => {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectIsLoading);\n  const filteredContacts = useSelector(selectVisibleContacts);\n\n  return (\n    <div>\n      {isLoading ? (\n        <p>Loading...</p>\n      ) : (\n        <s.List>\n          {filteredContacts.map(({ id, name, number }) => (\n            <s.ListItems key={id}>\n              <s.Name>{name}:</s.Name>\n              <s.Number>{number}</s.Number>\n              <s.Button\n                type=\"button\"\n                onClick={() => dispatch(deleteContact(id))}\n              >\n                Dead\n              </s.Button>\n            </s.ListItems>\n          ))}\n        </s.List>\n      )}\n    </div>\n  );\n};\n","import { useDispatch } from 'react-redux';\nimport { useEffect } from 'react';\nimport { fetchContacts } from '../redux/contacts/operations';\n\nimport { Helmet } from 'react-helmet';\nimport { ContactForm } from 'components/ContactForm/ContactForm';\nimport { Filter } from 'components/Filter/Filter';\nimport { ContactList } from 'components/ContactList/ContactList';\n\nconst ContactsPage = () => {\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <div>\n      <Helmet>\n        <title>Contacts</title>\n      </Helmet>\n      <h1>Deathnote</h1>\n      <ContactForm />\n      <h2>Targets</h2>\n      <Filter />\n      <ContactList />\n    </div>\n  );\n};\n\nexport default ContactsPage;\n"],"names":["StyledForm","styled","Form","_templateObject","_taggedTemplateLiteral","_templateObject2","selectContacts","state","contacts","items","selectFilter","filter","value","selectIsLoading","isLoading","selectVisibleContacts","createSelector","contact","name","toLowerCase","includes","NameInputSchema","Yup","shape","min","required","number","matches","ContactForm","dispatch","useDispatch","useSelector","addNewContact","newContact","some","alert","addContact","_jsx","Formik","initialValues","validationSchema","onSubmit","values","actions","resetForm","children","_jsxs","s","Field","type","placeholder","ErrorMessage","Label","Text","Container","_templateObject3","Filter","FaSkull","fill","onChange","evt","setFilter","target","List","ListItems","Button","Name","_templateObject4","Number","_templateObject5","ContactList","filteredContacts","map","_ref","id","onClick","deleteContact","useEffect","fetchContacts","Helmet"],"sourceRoot":""}